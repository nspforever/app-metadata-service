// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/guannan.du/workspace/go/src/github.com/nspforever/app-metadata-service/pkg/upserting/service.go

// Package upserting is a generated GoMock package.
package upserting

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/nspforever/app-metadata-service/pkg/models"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// UpsertApp mocks base method
func (m *MockService) UpsertApp(arg0 *models.AppMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertApp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertApp indicates an expected call of UpsertApp
func (mr *MockServiceMockRecorder) UpsertApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertApp", reflect.TypeOf((*MockService)(nil).UpsertApp), arg0)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// UpsertApp mocks base method
func (m *MockRepository) UpsertApp(arg0 *models.AppMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertApp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertApp indicates an expected call of UpsertApp
func (mr *MockRepositoryMockRecorder) UpsertApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertApp", reflect.TypeOf((*MockRepository)(nil).UpsertApp), arg0)
}
